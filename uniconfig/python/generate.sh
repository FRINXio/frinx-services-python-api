#!/usr/bin/env bash

REST_API_PATH='frinx_api/uniconfig/rest_api.py'

# remove obsolete files, because are not cleaned during generations
API_PATH='frinx_api/uniconfig/'

uid=$(stat -c '%u' ${API_PATH} )
gid=$(stat -c '%g' ${API_PATH} )

rm -rf frinx_api/uniconfig/*

poetry install

poetry run datamodel-codegen \
  --disable-timestamp \
  --use-field-description \
  --use-schema-description \
  --use-default \
  --strict-nullable \
  --field-constraints \
  --collapse-root-models \
  --use-standard-collections \
  --allow-population-by-field-name \
  --input /swagger/uniconfig.yaml \
  --input-file-type openapi \
  --openapi-scopes paths \
  --output frinx_api/uniconfig \
  --output-model-type pydantic_v2.BaseModel \
  --target-python-version 3.10 \
  --custom-file-header "# generated by datamodel-codegen"

# generate rest_api file to map URL, Method and models from datamodel-codegen
poetry run python3 ./generate_rest_api.py --input /swagger/uniconfig.yaml --output ${REST_API_PATH}

# apply REST API patches
cat ./patches/rest_api_patch.txt >> ${REST_API_PATH}

# apply all git patches
set -e
for patch in "./patches"/*.patch
do
  echo "Applying patch: $patch"
  # Check if the patch can be applied
  git apply --check "$patch"
  # Apply the patch
  git apply "$patch"
done
set +e

## use default formatting
poetry run ruff --fix . || true

chown -R "${uid}:${gid}" frinx_api/uniconfig/*
