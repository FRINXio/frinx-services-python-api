# generated by datamodel-codegen

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field

from . import TagIdentityref


class Template(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    yang_repository: Optional[str] = Field(None, alias='yang-repository')
    """
    Name of yang-repository used for parsing of template configuration.
    It contains identifier of the YANG schema repository.
    """
    template_configuration: str = Field(..., alias='template-configuration')
    """
    Template configuration without wrapping 'configuration' element
    (only content of template).
    """
    template_name: str = Field(..., alias='template-name')
    """
    Identifier of the template.
    """


class Tag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    paths: Optional[list[str]] = None
    """
    List of paths on which tag should be applied to. Paths must be specified as relative
    paths to root 'configuration' container and formatted based on RFC-8040 rules.
    """
    tag: Optional[TagIdentityref] = None


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    templates: Optional[list[Template]] = None
    tags: Optional[list[Tag]] = None
    """
    List of template tags that are additionally written into template configuration.
    """
