# generated by datamodel-codegen

from __future__ import annotations

from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    repository_name: Optional[str] = Field(None, alias='repository-name')
    """
    Name of the schema repository / directory that is used for persistence of YANG artifacts.
    """
    keywords: Optional[list[str]] = None
    """
    Keyword to search for in the schema.
    """


class OperPath(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    generated_json: Optional[dict[str, Any]] = Field(None, alias='generated-json')
    path: Optional[str] = None


class ConfigPath(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    generated_json: Optional[dict[str, Any]] = Field(None, alias='generated-json')
    path: Optional[str] = None


class Output(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    oper_paths: Optional[list[OperPath]] = Field(None, alias='oper-paths')
    """
    Path containing the specified keyword. (Operational)
    """
    config_paths: Optional[list[ConfigPath]] = Field(None, alias='config-paths')
    """
    Path containing the specified keyword. (Configurational)
    """
