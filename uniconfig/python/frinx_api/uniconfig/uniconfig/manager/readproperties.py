# generated by datamodel-codegen

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    property_keys: Optional[list[str]] = Field(None, alias='property-keys')
    """
    Property keys from user
    """


class PropertiesMapItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    value: Optional[str] = None
    """
    String property value
    """
    key: Optional[str] = None
    """
    Identifies a unique property key
    """


class Output(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    properties_map: Optional[list[PropertiesMapItem]] = Field(
        None, alias='properties-map'
    )
    """
    Properties map key->value
    """
    read_properties_status: str = Field(..., alias='read-properties-status')
    """
    Which properties are read and which are ignored.
    """
