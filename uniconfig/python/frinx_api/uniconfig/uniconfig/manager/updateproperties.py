# generated by datamodel-codegen

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, ConfigDict, Field


class PropertiesMapItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[str] = None
    """
    Identifies a unique property name
    """
    value: Optional[str] = None
    """
    String property value
    """


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    properties_map: Optional[list[PropertiesMapItem]] = Field(
        None, alias='properties-map'
    )
    """
    Properties map name->value
    """


class Output(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    update_properties_status: str = Field(..., alias='update-properties-status')
    """
    Updating properties or adding was successful or not.
    """
