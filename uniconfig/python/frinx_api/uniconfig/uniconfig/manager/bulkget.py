# generated by datamodel-codegen

from __future__ import annotations

from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field

from . import ConnectionType
from . import ContentType


class Node(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_id: Optional[str] = Field(None, alias='node-id')
    path: str
    """
    Data tree instance identifier
    """
    ignore_missing_data_error: Optional[bool] = Field(
        None, alias='ignore-missing-data-error'
    )
    """
    Flag to ignore missing data error to prevent global failure of bulk-get RPC.
    """
    content: Optional[ContentType] = None
    connection_type: Optional[ConnectionType] = Field(None, alias='connection-type')


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    nodes: Optional[list[Node]] = None
    """
    List of get operation data per node and content type
    """


class NodeResultItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_id: Optional[str] = Field(None, alias='node-id')
    path: Optional[str] = None
    data: Optional[dict[str, Any]] = None
    """
    Data tree result
    """
    content: Optional[ContentType] = None


class NodeResults(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_result: Optional[list[NodeResultItem]] = Field(None, alias='node-result')


class Output(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_results: Optional[NodeResults] = Field(
        None,
        alias='node-results',
        title='uniconfig.manager.bulkgetoutputfields.NodeResults',
    )
