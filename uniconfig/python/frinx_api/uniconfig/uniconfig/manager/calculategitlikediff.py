# generated by datamodel-codegen

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field


class TargetNodes(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node: Optional[list[str]] = None


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    target_nodes: Optional[TargetNodes] = Field(
        None,
        alias='target-nodes',
        title='uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes',
    )


class Change(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: Optional[str] = None
    """
    Changes on the specified path in a git like style.
    """
    path: Optional[str] = None
    """
    Instance-identifier of updated data node.
    """


class NodeResultItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    changes: Optional[list[Change]] = None
    """
    All changes that happened between intended and actual uniconfig node
    """
    node_id: Optional[str] = Field(None, alias='node-id')
    topology_id: Optional[str] = Field(None, alias='topology-id')


class NodeResults(BaseModel):
    """
    Individual result of calculate-diff for given nodes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_result: Optional[list[NodeResultItem]] = Field(None, alias='node-result')
    """
    Differences between intended and actual uniconfig node in a git like style.
    """


class Output(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_results: Optional[NodeResults] = Field(
        None,
        alias='node-results',
        title='uniconfig.manager.calculategitlikediffoutputfields.NodeResults',
    )
    """
    Individual result of calculate-diff for given nodes.
    """
