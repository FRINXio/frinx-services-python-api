# generated by datamodel-codegen

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field


class PrivateKeyItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: Optional[str] = None
    """
    Base64 encoded private key.
    """
    name: Optional[str] = None
    certificate_chain: Optional[list[str]] = Field(None, alias='certificate-chain')
    """
    A certificate chain for this public key. Each certificate is an X.509 v3 certificate
    structure as specified by RFC5280, encoded using the Base64 format.
    """


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    private_key: Optional[list[PrivateKeyItem]] = Field(None, alias='private-key')
    """
    A private key.
    """
