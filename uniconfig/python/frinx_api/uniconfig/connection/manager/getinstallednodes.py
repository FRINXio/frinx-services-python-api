# generated by datamodel-codegen

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field

from . import MountType


class NodeResultItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_id: Optional[str] = Field(None, alias='node-id')
    topology_id: Optional[str] = Field(None, alias='topology-id')


class NodeResults(BaseModel):
    """
    Individual result of node identifiers for given nodes.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_result: Optional[list[NodeResultItem]] = Field(None, alias='node-result')
    """
    List of node identifiers.
    """


class Output(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_results: Optional[NodeResults] = Field(
        None,
        alias='node-results',
        title='connection.manager.getinstallednodesoutputfields.NodeResults',
    )
    """
    Individual result of node identifiers for given nodes.
    """


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mount_type: Optional[MountType] = Field(None, alias='mount-type')
