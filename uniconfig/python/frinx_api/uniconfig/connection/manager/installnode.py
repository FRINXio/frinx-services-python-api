# generated by datamodel-codegen

from __future__ import annotations

from typing import Any
from typing import Optional
from typing import Union

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field

from ... import subscriptions
from ...cli import topology
from ...gnmi import topology as topology_2
from ...netconf.node import topology as topology_1
from ...snmp import topology as topology_3
from ...uniconfig import config


class CliTopologyKeepaliveStrategy(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_keepalive_delay: Optional[int] = Field(
        None, alias='cli-topology:keepalive-delay', ge=0, le=65535
    )
    cli_topology_keepalive_timeout: Optional[int] = Field(
        None, alias='cli-topology:keepalive-timeout', ge=0, le=65535
    )
    cli_topology_keepalive_initial_delay: Optional[int] = Field(
        None, alias='cli-topology:keepalive-initial-delay', ge=0, le=65535
    )


class CliTopologyKeepaliveStrategyModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_command_timeout: Optional[int] = Field(
        None, alias='cli-topology:command-timeout', ge=0, le=65535
    )
    """
    Maximal time (in seconds) for command execution, if a command cannot be executed on
    a device in this time, the execution is considered a failure
    """
    cli_topology_connection_establish_timeout: Optional[int] = Field(
        None, alias='cli-topology:connection-establish-timeout', ge=0, le=65535
    )
    """
    Maximal time (in seconds) for connection establishment, if a connection attempt does
    not succeed in this time, the attempt is considered a failure
    """
    cli_topology_connection_lazy_timeout: Optional[int] = Field(
        None, alias='cli-topology:connection-lazy-timeout', ge=0, le=65535
    )
    """
    Maximal time (in seconds) for connection to keep alive, if no activity was detected
    in the session and the timeout has been reached, connection will be stopped
    """


class UniconfigConfigBlacklist(BaseModel):
    """
    Reads which are not invoked for sync-from-network and initial config read.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_extension: Optional[list[str]] = Field(
        None, alias='uniconfig-config:extension'
    )
    """
    List of extensions that mark top level containers/lists.
    Example value: ["common:hidden true"]
    """
    uniconfig_config_path: Optional[list[str]] = Field(
        None, alias='uniconfig-config:path'
    )
    """
    Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
    e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
    container.
    """


class UniconfigConfigNodes(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_blacklist: Optional[UniconfigConfigBlacklist] = Field(
        None,
        alias='uniconfig-config:blacklist',
        title='uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist',
    )
    """
    Reads which are not invoked for sync-from-network and initial config read.
    """


class UniconfigConfigWhitelist(BaseModel):
    """
    Reads which are invoked for sync-from-network and initial config read.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_extension: Optional[list[str]] = Field(
        None, alias='uniconfig-config:extension'
    )
    """
    List of extensions that mark top level containers/lists.
    Example value: ["common:hidden true"]
    """
    uniconfig_config_path: Optional[list[str]] = Field(
        None, alias='uniconfig-config:path'
    )
    """
    Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
    e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
    container.
    """


class UniconfigConfigNodesModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_whitelist: Optional[UniconfigConfigWhitelist] = Field(
        None,
        alias='uniconfig-config:whitelist',
        title='uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist',
    )
    """
    Reads which are invoked for sync-from-network and initial config read.
    """


class CliTopologyDefaultErrorPatterns(BaseModel):
    """
    Device specific list of error patterns. This list is the primary source
    of error checking on the device. This list can be overridden from the code.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_error_pattern: Optional[list[str]] = Field(
        None, alias='cli-topology:error-pattern'
    )
    """
    Device specific error patterns.
    """


class CliTopologyPrivilegedModeCredentials(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_secret: Optional[str] = Field(None, alias='cli-topology:secret')
    """
    Privileged EXEC mode password for Cisco IOS devices. If not set credentials
    password will be used
    """


class CliTopologyDefaultCommitErrorPatterns(BaseModel):
    """
    Device specific list of commit error patterns. The following list
    of patterns is checked in the input after 'commit' command is sent.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_commit_error_pattern: Optional[list[str]] = Field(
        None, alias='cli-topology:commit-error-pattern'
    )
    """
    Device specific commit error patterns.
    """


class CliTopologyCredentials(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_username: Optional[str] = Field(None, alias='cli-topology:username')
    cli_topology_password: Optional[str] = Field(None, alias='cli-topology:password')


class NetconfNodeTopologyNonModuleCapabilities(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_override: Optional[bool] = Field(
        None, alias='netconf-node-topology:override'
    )
    """
    Whether to override or merge this list of non-module based capabilities with non-module
    based capabilities from device
    """
    netconf_node_topology_capability: Optional[list[str]] = Field(
        None, alias='netconf-node-topology:capability'
    )
    """
    Set a list of non-module based capabilities to override or merge non-module capabilities
    provided in device's hello message. Can be used for devices that do not report or
    incorrectly report non-module based capabilities in their hello message
    """


class NetconfNodeTopologyYangModuleCapabilities(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_override: Optional[bool] = Field(
        None, alias='netconf-node-topology:override'
    )
    """
    Whether to override or merge this list of capabilities with capabilities from device
    """
    netconf_node_topology_capability: Optional[list[str]] = Field(
        None, alias='netconf-node-topology:capability'
    )
    """
    Set a list of capabilities to override capabilities provided in device's hello message.
    Can be used for devices that do not report any yang modules in their hello message
    """


class NetconfNodeTopologyYangLibrary(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_password: Optional[str] = Field(
        None, alias='netconf-node-topology:password'
    )
    netconf_node_topology_yang_library_url: Optional[str] = Field(
        None, alias='netconf-node-topology:yang-library-url'
    )
    """
    Yang library to be plugged as additional source provider into the shared schema repository
    """
    netconf_node_topology_username: Optional[str] = Field(
        None, alias='netconf-node-topology:username'
    )


class NetconfNodeTopologyOdlHelloMessageCapabilities(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_capability: Optional[list[str]] = Field(
        None, alias='netconf-node-topology:capability'
    )
    """
    Certain devices are non-accepting of ODL's hello message.  This allows specification of
    a custom ODL hello message based on a list of supported capabilities.
    """


class NetconfNodeTopologySessionTimers(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_keepalive_delay: Optional[int] = Field(
        None, alias='netconf-node-topology:keepalive-delay', ge=0, le=4294967295
    )
    """
    Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
    If a value <1 is provided, no keepalives will be sent
    """
    netconf_node_topology_between_attempts_timeout: Optional[int] = Field(
        None, alias='netconf-node-topology:between-attempts-timeout', ge=0, le=65535
    )
    """
    Initial timeout in seconds to wait between connection attempts.
    Will be multiplied by reconenction-attempts-multiplier with every additional attempt
    """
    netconf_node_topology_max_reconnection_attempts: Optional[int] = Field(
        None,
        alias='netconf-node-topology:max-reconnection-attempts',
        ge=0,
        le=4294967295,
    )
    """
    Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
    This is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts
    and for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.
    This enables users using different amount of reconnects for initial attempts vs subsequent reconnects.
    """
    netconf_node_topology_initial_connection_timeout: Optional[int] = Field(
        None,
        alias='netconf-node-topology:initial-connection-timeout',
        ge=0,
        le=4294967295,
    )
    """
    Specifies timeout in seconds after which connection must be established.
    """
    netconf_node_topology_max_connection_attempts: Optional[int] = Field(
        None, alias='netconf-node-topology:max-connection-attempts', ge=0, le=4294967295
    )
    """
    Maximum number of connection retries. Non positive value or null is interpreted as infinity.
    """
    netconf_node_topology_reconnenction_attempts_multiplier: Optional[float] = Field(
        None,
        alias='netconf-node-topology:reconnenction-attempts-multiplier',
        ge=-9.223372036854776e17,
        le=9.223372036854776e17,
    )
    """
    After each reconnection attempt, the delay between reconnection attempts is
    multiplied by this factor. By default, it is set to 1.5. This means that the next
    delay between attempts will be 3000 ms, then it will be 4500 ms, etc.
    """
    netconf_node_topology_confirm_commit_timeout: Optional[int] = Field(
        None, alias='netconf-node-topology:confirm-commit-timeout', ge=0, le=4294967295
    )
    """
    Timeout period in seconds to issued commit after confirmed-commit
    """
    netconf_node_topology_request_transaction_timeout: Optional[int] = Field(
        None,
        alias='netconf-node-topology:request-transaction-timeout',
        ge=0,
        le=4294967295,
    )
    """
    Timeout in seconds for blocking operations within transactions.
    """


class NetconfNodeTopologyFlags(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_streaming_session: Optional[bool] = Field(
        None, alias='netconf-node-topology:streaming-session'
    )
    """
    NETCONF session is created and optimized for receiving of NETCONF notifications
    from remote server.
    """
    netconf_node_topology_enabled_strict_parsing: Optional[bool] = Field(
        None, alias='netconf-node-topology:enabled-strict-parsing'
    )
    """
    If this parameter is set to 'false', then parser should ignore unknown elements and not throw
    exception during parsing.
    """
    netconf_node_topology_reconnect_on_changed_schema: Optional[bool] = Field(
        None, alias='netconf-node-topology:reconnect-on-changed-schema'
    )
    """
    If it is set to 'true', NETCONF notifications are supported by device, and NETCONF
    notifications are enabled ('enabled-notifications' flag), the connector would auto
    disconnect/reconnect when schemas are changed in the remote device. The connector subscribes
    (right after connect) to base netconf notifications and listens
    for netconf-capability-change notification
    """
    netconf_node_topology_enabled_notifications: Optional[bool] = Field(
        None, alias='netconf-node-topology:enabled-notifications'
    )
    """
    If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will
    expose NETCONF notification and subscription services.
    """


class NetconfNodeTopologyKeyBased(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_key_id: Optional[str] = Field(
        None, alias='netconf-node-topology:key-id'
    )
    netconf_node_topology_username: Optional[str] = Field(
        None, alias='netconf-node-topology:username'
    )


class NetconfNodeTopologyCredentials(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_key_based: Optional[NetconfNodeTopologyKeyBased] = Field(
        None,
        alias='netconf-node-topology:key-based',
        title='netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased',
    )


class NetconfNodeTopologyCredentialsModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_username: Optional[str] = Field(
        None, alias='netconf-node-topology:username'
    )
    netconf_node_topology_password: Optional[str] = Field(
        None, alias='netconf-node-topology:password'
    )


class NetconfNodeTopologyLoginPassword(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_password: Optional[str] = Field(
        None, alias='netconf-node-topology:password'
    )
    netconf_node_topology_username: Optional[str] = Field(
        None, alias='netconf-node-topology:username'
    )


class NetconfNodeTopologyCredentialsModel1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_login_password: Optional[NetconfNodeTopologyLoginPassword] = (
        Field(
            None,
            alias='netconf-node-topology:login-password',
            title='netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword',
        )
    )


class NetconfNodeTopologyLoginPasswordUnencrypted(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_password: Optional[str] = Field(
        None, alias='netconf-node-topology:password'
    )
    netconf_node_topology_username: Optional[str] = Field(
        None, alias='netconf-node-topology:username'
    )


class NetconfNodeTopologyCredentialsModel2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_login_password_unencrypted: Optional[
        NetconfNodeTopologyLoginPasswordUnencrypted
    ] = Field(
        None,
        alias='netconf-node-topology:login-password-unencrypted',
        title='netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted',
    )


class UniconfigConfigNodesModel1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_blacklist: Optional[UniconfigConfigBlacklist] = Field(
        None,
        alias='uniconfig-config:blacklist',
        title='uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist',
    )
    """
    Reads which are not invoked for sync-from-network and initial config read.
    """


class UniconfigConfigNodesModel2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_whitelist: Optional[UniconfigConfigWhitelist] = Field(
        None,
        alias='uniconfig-config:whitelist',
        title='uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist',
    )
    """
    Reads which are invoked for sync-from-network and initial config read.
    """


class GnmiTopologyFlags(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_enabled_notifications: Optional[bool] = Field(
        None, alias='gnmi-topology:enabled-notifications'
    )
    """
    If it is set to 'true' and GNMI device supports notifications, GNMI mountpoint will
    expose GNMI notification and subscription services.
    """


class GnmiTopologyOtherParameters(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_dry_run_journal_size: Optional[int] = Field(
        None, alias='gnmi-topology:dry-run-journal-size', ge=0, le=65535
    )
    """
    Size of the DRY RUN gnmi mountpoint journal. DRY RUN journal captures gnmi operations that
    would be executed when reading/writing some configuration. However the operations are not actually
    sent to the device
    """


class GnmiTopologySecurityChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_keystore_id: Optional[str] = Field(
        None, alias='gnmi-topology:keystore-id'
    )
    """
    Identifier to keystore. Keystore is defined in gnmi-certificate-storage model.
    """


class GnmiTopologyCredentials(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_password: Optional[str] = Field(None, alias='gnmi-topology:password')
    """
    specify the target password as part of the user credentials.
    """
    gnmi_topology_username: Optional[str] = Field(None, alias='gnmi-topology:username')
    """
    specify the target username as part of the user credentials.
    """


class GnmiTopologyDependencyPath(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_after: Optional[str] = Field(None, alias='gnmi-topology:after')
    """
    Specific path that should be handled after the 'before' leaf.
    Exact matches as well as subtrees of this path will be ordered
    """
    gnmi_topology_before: Optional[str] = Field(None, alias='gnmi-topology:before')
    """
    Specific path that should be handled before the 'after' leaf.
    Exact matches as well as subtrees of this path will be ordered
    """


class GnmiTopologySessionTimers(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_request_max_size: Optional[int] = Field(
        None, alias='gnmi-topology:request-max-size', ge=0, le=33554432
    )
    """
    The maximum size of a request in bytes. The maximum size of this leaf is
    32 mebibytes (33554432).
    """
    gnmi_topology_internal_transaction_timeout: Optional[int] = Field(
        None, alias='gnmi-topology:internal-transaction-timeout', ge=0, le=65535
    )
    """
    Timeout for internal data broker transactions (Not uniconfig transaction).
    Transaction times out if not completed in X seconds.
    """
    gnmi_topology_request_timeout: Optional[int] = Field(
        None, alias='gnmi-topology:request-timeout', ge=0, le=65535
    )
    """
    Timeout for each gnmi request. Request times out if not completed in X seconds.
    """


class GnmiTopologyGnmiParameters(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_path_target: Optional[str] = Field(
        None, alias='gnmi-topology:path-target'
    )
    """
    The path-target field is used to specify the context of
    a particular stream of data. The data stream can be intended
    for individual target datastores. Only set in prefix for a path.
    This field MUST only ever be present on prefix paths in
    the corresponding request and response messages.
    This field is optional for clients. REF:gNMI Specification Section 2.2.2.1
    """
    gnmi_topology_use_model_name_prefix: Optional[bool] = Field(
        None, alias='gnmi-topology:use-model-name-prefix'
    )
    """
    Some devices require a module prefix in first element name
    of gNMI request path (e.g interfaces -> openconfig-interfaces:interfaces).
    When flag use-model-name-prefix is set to true for device, YIID will be
    transformed into gNMI path where elements have their module name.
    E.g. element interfaces from module openconfig-interfaces will be
    transformed as openconfig-interfaces:interfaces
    """


class GnmiForceCapabilitiesForce(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_force_capabilities_force_cached_capabilities: Optional[list[Optional[str]]] = (
        Field(
            None,
            alias='gnmi-force-capabilities:force-cached-capabilities',
            max_length=1,
            min_length=1,
        )
    )
    """
    Use all YANG models from cache directory
    """


class GnmiForceCapabilitiesForceCapabilityItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_force_capabilities_name: Optional[str] = Field(
        None, alias='gnmi-force-capabilities:name'
    )
    """
    Name of the yang model
    """
    gnmi_force_capabilities_version: Optional[str] = Field(
        None, alias='gnmi-force-capabilities:version'
    )
    """
    Version of the yang model
    """


class GnmiForceCapabilitiesForceModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_force_capabilities_force_capability: Optional[
        list[GnmiForceCapabilitiesForceCapabilityItem]
    ] = Field(None, alias='gnmi-force-capabilities:force-capability')
    """
    List of capabilities that restrict the
    use of the models. The client restricts the set of data
    models to be used when interacting with the target.
    The target must not utilize data tree elements that
    are defined in schema modules outside the specified list
    of capabilities.
    """


class GnmiTopologyExtensionsParameters(BaseModel):
    """
    Defines a set of extensions parameters which can be optionally
    included with the request and response messages of gNMI RPCs.
    Allows registration of extensions defined outside of this package.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_gnmi_parameters: Optional[GnmiTopologyGnmiParameters] = Field(
        None,
        alias='gnmi-topology:gnmi-parameters',
        title='gnmi.topology.gnmiconnectionparameters.extensionsparameters.GnmiParameters',
    )
    gnmi_force_capabilities_force: Optional[
        Union[GnmiForceCapabilitiesForce, GnmiForceCapabilitiesForceModel]
    ] = Field(None, alias='gnmi-force-capabilities:force')


class UniconfigConfigNodesModel3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_blacklist: Optional[UniconfigConfigBlacklist] = Field(
        None,
        alias='uniconfig-config:blacklist',
        title='uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist',
    )
    """
    Reads which are not invoked for sync-from-network and initial config read.
    """


class UniconfigConfigNodesModel4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_whitelist: Optional[UniconfigConfigWhitelist] = Field(
        None,
        alias='uniconfig-config:whitelist',
        title='uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist',
    )
    """
    Reads which are invoked for sync-from-network and initial config read.
    """


class SnmpTopologyNoAuthNoPriv(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_community_string: Optional[str] = Field(
        None, alias='snmp-topology:community-string'
    )
    """
    Sets the community octet string. This is a convenience
    method to set the security name for community based
    SNMP (v1 and v2c).
    """


class SnmpTopologySecurityModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_no_auth_no_priv: Optional[SnmpTopologyNoAuthNoPriv] = Field(
        None,
        alias='snmp-topology:no-auth-no-priv',
        title='snmp.topology.security.securitymodel.noauthnoprivcase.NoAuthNoPriv',
    )


class UniconfigConfigDeviceCrypto(BaseModel):
    """
    Settings related to encryption of arbitrary leaves/leaf-list using public key that
    is read from device on specified path.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_public_key_cipher_type: Optional[config.PublicKeyCipherType] = (
        Field(None, alias='uniconfig-config:public-key-cipher-type')
    )
    uniconfig_config_public_key_path: Optional[str] = Field(
        None, alias='uniconfig-config:public-key-path'
    )
    """
    Path to leaf containing public key in Base64 binary format.
    """


class Cli(BaseModel):
    """
    CLI node settings.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    cli_topology_device_type: Optional[str] = Field(
        None, alias='cli-topology:device-type'
    )
    uniconfig_config_confirmed_commit_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:confirmed-commit-enabled'
    )
    """
    Specifies whether to send confirmed commit RPC between validate RPC and confirming commit.
    """
    uniconfig_config_replace_paths: Optional[list[str]] = Field(
        None, alias='uniconfig-config:replace-paths'
    )
    """
    Replace paths that point to config that should be handled as a one replace request
    """
    cli_topology_resend_command_delay: Optional[int] = Field(
        None, alias='cli-topology:resend-command-delay', ge=0, le=65535
    )
    """
    Delay between re-send commands.
    """
    cli_topology_dry_run_journal_size: Optional[int] = Field(
        None, alias='cli-topology:dry-run-journal-size', ge=0, le=65535
    )
    """
    Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be
    executed when reading/writing some configuration. However the commands are not actually sent
    to the device
    """
    uniconfig_config_store_failed_installation: Optional[bool] = Field(
        None, alias='uniconfig-config:store-failed-installation'
    )
    """
    In case UniConfig fails to install the device, it will still populate the database.
    """
    cli_topology_max_connection_attempts_install: Optional[int] = Field(
        None, alias='cli-topology:max-connection-attempts-install', ge=0, le=4294967295
    )
    """
    Maximum number of connection attempts used during installation of device.
    Value 0 disables the limit
    """
    cli_topology_keepalive_strategy: Optional[
        Union[CliTopologyKeepaliveStrategy, CliTopologyKeepaliveStrategyModel]
    ] = Field(None, alias='cli-topology:keepalive-strategy')
    uniconfig_config_nodes: Optional[
        Union[UniconfigConfigNodes, UniconfigConfigNodesModel]
    ] = Field(None, alias='uniconfig-config:nodes')
    cli_topology_max_resend_command_attempt: Optional[int] = Field(
        None, alias='cli-topology:max-resend-command-attempt', ge=0, le=4294967295
    )
    """
    Maximum number of re-send commands that are sent to device after first attempt.
    Value 0 disables resending.
    """
    cli_topology_max_reconnection_attempts: Optional[int] = Field(
        None, alias='cli-topology:max-reconnection-attempts', ge=0, le=4294967295
    )
    """
    Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
    This is an optional parameter. If set, max-connection-attempts will be used only once,
    for the first connection attempts and for any subsequent disconnect-connect cycles,
    max-reconnect-attempts will be used. This enables users using different amount of reconnects
    for initial attempts vs subsequent reconnects.
    """
    uniconfig_config_install_uniconfig_node_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:install-uniconfig-node-enabled'
    )
    cli_topology_device_version: Optional[str] = Field(
        None, alias='cli-topology:device-version'
    )
    cli_topology_max_connection_attempts: Optional[int] = Field(
        None, alias='cli-topology:max-connection-attempts', ge=0, le=4294967295
    )
    """
    Maximum number of connection attempts before connection initialization is marked as failed.
    Value 0 disables this limit.
    """
    uniconfig_config_admin_state: Optional[config.AdminState] = Field(
        None, alias='uniconfig-config:admin-state'
    )
    cli_topology_pass_through: Optional[dict[str, Any]] = Field(
        None,
        alias='cli-topology:pass-through',
        title='cli.topology.clinodeconnectionstatus.PassThrough',
    )
    """
    When the underlying node is connected, its cli context
    is available verbatim under this container through the
    mount extension.
    """
    cli_topology_host: Optional[str] = Field(None, alias='cli-topology:host')
    cli_topology_default_error_patterns: Optional[CliTopologyDefaultErrorPatterns] = (
        Field(
            None,
            alias='cli-topology:default-error-patterns',
            title='cli.translate.registry.errorpatterns.DefaultErrorPatterns',
        )
    )
    """
    Device specific list of error patterns. This list is the primary source
    of error checking on the device. This list can be overridden from the code.
    """
    cli_topology_transport_type: Optional[topology.TransportTypeEnumeration] = Field(
        None, alias='cli-topology:transport-type'
    )
    uniconfig_config_store_without_mount: Optional[bool] = Field(
        None, alias='uniconfig-config:store-without-mount'
    )
    """
    In case we just want to store node metadata in the database without creating of mountpoint.
    """
    cli_topology_privileged_mode_credentials: Optional[
        CliTopologyPrivilegedModeCredentials
    ] = Field(None, alias='cli-topology:privileged-mode-credentials')
    uniconfig_config_validation_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:validation-enabled'
    )
    """
    Specifies whether to send validate RPC before commit RPC.
    """
    cli_topology_default_commit_error_patterns: Optional[
        CliTopologyDefaultCommitErrorPatterns
    ] = Field(
        None,
        alias='cli-topology:default-commit-error-patterns',
        title='cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns',
    )
    """
    Device specific list of commit error patterns. The following list
    of patterns is checked in the input after 'commit' command is sent.
    """
    cli_topology_journal_level: Optional[topology.JournalLevel] = Field(
        None, alias='cli-topology:journal-level'
    )
    uniconfig_config_device_crypto: Optional[UniconfigConfigDeviceCrypto] = Field(
        None,
        alias='uniconfig-config:device-crypto',
        title='uniconfig.config.uniconfigconfignodefields.DeviceCrypto',
    )
    """
    Settings related to encryption of arbitrary leaves/leaf-list using public key that
    is read from device on specified path.
    """
    uniconfig_config_sequence_read_active: Optional[bool] = Field(
        None, alias='uniconfig-config:sequence-read-active'
    )
    """
    Forces reading of data sequentially when mounting device.
    """
    cli_topology_journal_size: Optional[int] = Field(
        None, alias='cli-topology:journal-size', ge=0, le=65535
    )
    """
    Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes
    them available for users/apps for debugging purposes. Value 0 disables journaling
    """
    uniconfig_config_uniconfig_native_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:uniconfig-native-enabled'
    )
    cli_topology_port: Optional[int] = Field(
        None, alias='cli-topology:port', ge=0, le=65535
    )
    cli_topology_credentials: Optional[CliTopologyCredentials] = Field(
        None, alias='cli-topology:credentials'
    )
    cli_topology_parsing_engine: Optional[topology.ParsingEngine] = Field(
        None, alias='cli-topology:parsing-engine'
    )


class NetconfNodeTopologyOtherParameters(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_edit_config_test_option: Optional[
        topology_1.EditConfigTestOption
    ] = Field(None, alias='netconf-node-topology:edit-config-test-option')
    netconf_node_topology_dry_run_journal_size: Optional[int] = Field(
        None, alias='netconf-node-topology:dry-run-journal-size', ge=0, le=65535
    )
    """
    Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that
    would be executed when reading/writing some configuration. However the RPCs are not actually
    sent to the device
    """
    netconf_node_topology_custom_connector_factory: Optional[str] = Field(
        None, alias='netconf-node-topology:custom-connector-factory'
    )
    """
    Specification of the custom NETCONF connector factory. For example,
               if device doesn't support candidate data-store, this parameter
               should be set to 'netconf-customization-alu-ignore-candidate' string.
    """
    netconf_node_topology_concurrent_rpc_limit: Optional[int] = Field(
        None, alias='netconf-node-topology:concurrent-rpc-limit', ge=0, le=65535
    )
    """
    Limit of concurrent messages that can be send before reply messages are received.
    If value <1 is provided, no limit will be enforced
    """


class NetconfNodeTopologyNetconfParameters(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_session_timers: Optional[NetconfNodeTopologySessionTimers] = (
        Field(
            None,
            alias='netconf-node-topology:session-timers',
            title='netconf.node.topology.netconfparametersgroups.SessionTimers',
        )
    )
    netconf_node_topology_flags: Optional[NetconfNodeTopologyFlags] = Field(
        None,
        alias='netconf-node-topology:flags',
        title='netconf.node.topology.netconfparametersgroups.Flags',
    )
    netconf_node_topology_other_parameters: Optional[
        NetconfNodeTopologyOtherParameters
    ] = Field(
        None,
        alias='netconf-node-topology:other-parameters',
        title='netconf.node.topology.netconfparametersgroups.OtherParameters',
    )


class NetconfNodeTopologyNetconfParametersModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_connection_timeout_millis: Optional[int] = Field(
        None,
        alias='netconf-node-topology:connection-timeout-millis',
        ge=0,
        le=4294967295,
    )
    """
    Specifies timeout in milliseconds after which connection must be established.
    """
    netconf_node_topology_default_request_timeout_millis: Optional[int] = Field(
        None,
        alias='netconf-node-topology:default-request-timeout-millis',
        ge=0,
        le=4294967295,
    )
    """
    Timeout in milliseconds for blocking operations within transactions.
    """
    netconf_node_topology_between_attempts_timeout_millis: Optional[int] = Field(
        None,
        alias='netconf-node-topology:between-attempts-timeout-millis',
        ge=0,
        le=65535,
    )
    """
    Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt
    """
    netconf_node_topology_sleep_factor: Optional[float] = Field(
        None,
        alias='netconf-node-topology:sleep-factor',
        ge=-9.223372036854776e17,
        le=9.223372036854776e17,
    )
    """
    After each reconnection attempt, the delay between reconnection attempts is
    multiplied by this factor. By default, it is set to 1.5. This means that the next
    delay between attempts will be 3000 ms, then it will be 4500 ms, etc.
    """
    netconf_node_topology_confirm_timeout: Optional[int] = Field(
        None, alias='netconf-node-topology:confirm-timeout', ge=0, le=4294967295
    )
    """
    Timeout period in seconds to issued commit after confirmed-commit
    """
    netconf_node_topology_strict_parsing: Optional[bool] = Field(
        None, alias='netconf-node-topology:strict-parsing'
    )
    """
    If this parameter is set to 'false', then parser should ignore unknown elements and not throw
    exception during parsing.
    """
    netconf_node_topology_customization_factory: Optional[str] = Field(
        None, alias='netconf-node-topology:customization-factory'
    )
    """
    Specification of the custom NETCONF connector factory. For example,
    if device doesn't support candidate data-store, this parameter
    should be set to 'netconf-customization-alu-ignore-candidate' string.
    """
    netconf_node_topology_concurrent_rpc_limit: Optional[int] = Field(
        None, alias='netconf-node-topology:concurrent-rpc-limit', ge=0, le=65535
    )
    """
    Limit of concurrent messages that can be send before reply messages are received.
    If value <1 is provided, no limit will be enforced
    """
    netconf_node_topology_edit_config_test_option: Optional[
        topology_1.EditConfigTestOption
    ] = Field(None, alias='netconf-node-topology:edit-config-test-option')
    netconf_node_topology_dry_run_journal_size: Optional[int] = Field(
        None, alias='netconf-node-topology:dry-run-journal-size', ge=0, le=65535
    )
    """
    Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that
    would be executed when reading/writing some configuration. However the RPCs are not actually
    sent to the device
    """
    netconf_node_topology_max_connection_attempts: Optional[int] = Field(
        None, alias='netconf-node-topology:max-connection-attempts', ge=0, le=4294967295
    )
    """
    Maximum number of connection retries. Non positive value or null is interpreted as infinity.
    """
    netconf_node_topology_max_reconnection_attempts: Optional[int] = Field(
        None,
        alias='netconf-node-topology:max-reconnection-attempts',
        ge=0,
        le=4294967295,
    )
    """
    Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
    This is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts
    and for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.
    This enables users using different amount of reconnects for initial attempts vs subsequent reconnects.
    """
    netconf_node_topology_keepalive_delay: Optional[int] = Field(
        None, alias='netconf-node-topology:keepalive-delay', ge=0, le=4294967295
    )
    """
    Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
    If a value <1 is provided, no keepalives will be sent
    """
    netconf_node_topology_enabled_notifications: Optional[bool] = Field(
        None, alias='netconf-node-topology:enabled-notifications'
    )
    """
    If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will
    expose NETCONF notification and subscription services.
    """
    netconf_node_topology_reconnect_on_changed_schema: Optional[bool] = Field(
        None, alias='netconf-node-topology:reconnect-on-changed-schema'
    )
    """
    If it is set to 'true', NETCONF notifications are supported by device, and NETCONF
    notifications are enabled ('enabled-notifications' flag), the connector would auto
    disconnect/reconnect when schemas are changed in the remote device. The connector subscribes
    (right after connect) to base netconf notifications and listens
    for netconf-capability-change notification
    """
    netconf_node_topology_streaming_session: Optional[bool] = Field(
        None, alias='netconf-node-topology:streaming-session'
    )
    """
    NETCONF session is created and optimized for receiving of NETCONF notifications
    from remote server.
    """


class SubscriptionsStreamItem(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    subscriptions_mode: Optional[subscriptions.ModeEnum] = Field(
        None, alias='subscriptions:mode'
    )
    subscriptions_paths: Optional[list[str]] = Field(None, alias='subscriptions:paths')
    """
    Paths to which subscribe on data change events
    """
    subscriptions_stop_time: Optional[str] = Field(
        None, alias='subscriptions:stop-time'
    )
    """
    RFC5277: An optional parameter, <stopTime>, used with the optional replay feature to indicate the newest
    notifications of interest. If <stopTime> is not present, the notifications will continue until the
    subscription is terminated. Must be used with and be later than <startTime>. Values of <stopTime>
    in the future are valid.
    """
    subscriptions_start_time: Optional[str] = Field(
        None, alias='subscriptions:start-time'
    )
    """
    RFC5277: A parameter, <startTime>, used to trigger the replay feature and indicate that the replay
    should start at the time specified. If <startTime> is not present, this is not a replay subscription.
    It is not valid to specify start times that are later than the current time. If the <startTime> specified
    is earlier than the log can support, the replay will begin with the earliest available notification.
    """
    subscriptions_stream_name: Optional[str] = Field(
        None, alias='subscriptions:stream-name'
    )
    """
    Identifier of the notification stream.
    """


class Netconf(BaseModel):
    """
    NETCONF node settings.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    netconf_node_topology_pass_through: Optional[dict[str, Any]] = Field(
        None,
        alias='netconf-node-topology:pass-through',
        title='netconf.node.topology.netconfnodeconnectionstatus.PassThrough',
    )
    """
    When the underlying node is connected, its NETCONF context
    is available verbatim under this container through the
    mount extension.
    """
    uniconfig_config_confirmed_commit_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:confirmed-commit-enabled'
    )
    """
    Specifies whether to send confirmed commit RPC between validate RPC and confirming commit.
    """
    uniconfig_config_replace_paths: Optional[list[str]] = Field(
        None, alias='uniconfig-config:replace-paths'
    )
    """
    Replace paths that point to config that should be handled as a one replace request
    """
    netconf_node_topology_non_module_capabilities: Optional[
        NetconfNodeTopologyNonModuleCapabilities
    ] = Field(
        None,
        alias='netconf-node-topology:non-module-capabilities',
        title='netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities',
    )
    netconf_node_topology_schemaless: Optional[bool] = Field(
        None, alias='netconf-node-topology:schemaless'
    )
    netconf_node_topology_tcp_only: Optional[bool] = Field(
        None, alias='netconf-node-topology:tcp-only'
    )
    netconf_node_topology_yang_module_capabilities: Optional[
        NetconfNodeTopologyYangModuleCapabilities
    ] = Field(
        None,
        alias='netconf-node-topology:yang-module-capabilities',
        title='netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities',
    )
    uniconfig_config_admin_state: Optional[config.AdminState] = Field(
        None, alias='uniconfig-config:admin-state'
    )
    uniconfig_config_store_without_mount: Optional[bool] = Field(
        None, alias='uniconfig-config:store-without-mount'
    )
    """
    In case we just want to store node metadata in the database without creating of mountpoint.
    """
    netconf_node_topology_port: Optional[int] = Field(
        None, alias='netconf-node-topology:port', ge=0, le=65535
    )
    netconf_node_topology_yang_library: Optional[NetconfNodeTopologyYangLibrary] = (
        Field(
            None,
            alias='netconf-node-topology:yang-library',
            title='netconf.node.topology.netconfschemastorage.YangLibrary',
        )
    )
    uniconfig_config_validation_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:validation-enabled'
    )
    """
    Specifies whether to send validate RPC before commit RPC.
    """
    netconf_node_topology_odl_hello_message_capabilities: Optional[
        NetconfNodeTopologyOdlHelloMessageCapabilities
    ] = Field(
        None,
        alias='netconf-node-topology:odl-hello-message-capabilities',
        title='netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities',
    )
    uniconfig_config_device_crypto: Optional[UniconfigConfigDeviceCrypto] = Field(
        None,
        alias='uniconfig-config:device-crypto',
        title='uniconfig.config.uniconfigconfignodefields.DeviceCrypto',
    )
    """
    Settings related to encryption of arbitrary leaves/leaf-list using public key that
    is read from device on specified path.
    """
    uniconfig_config_sequence_read_active: Optional[bool] = Field(
        None, alias='uniconfig-config:sequence-read-active'
    )
    """
    Forces reading of data sequentially when mounting device.
    """
    uniconfig_config_store_failed_installation: Optional[bool] = Field(
        None, alias='uniconfig-config:store-failed-installation'
    )
    """
    In case UniConfig fails to install the device, it will still populate the database.
    """
    netconf_node_topology_host: Optional[str] = Field(
        None, alias='netconf-node-topology:host'
    )
    netconf_node_topology_netconf_parameters: Optional[
        Union[
            NetconfNodeTopologyNetconfParameters,
            NetconfNodeTopologyNetconfParametersModel,
        ]
    ] = Field(None, alias='netconf-node-topology:netconf-parameters')
    netconf_node_topology_credentials: Optional[
        Union[
            NetconfNodeTopologyCredentials,
            NetconfNodeTopologyCredentialsModel,
            NetconfNodeTopologyCredentialsModel1,
            NetconfNodeTopologyCredentialsModel2,
        ]
    ] = Field(None, alias='netconf-node-topology:credentials')
    subscriptions_stream: Optional[list[SubscriptionsStreamItem]] = Field(
        None, alias='subscriptions:stream'
    )
    """
    List of available streams to which subscription can be created.
    """
    uniconfig_config_nodes: Optional[
        Union[UniconfigConfigNodesModel1, UniconfigConfigNodesModel2]
    ] = Field(None, alias='uniconfig-config:nodes')
    uniconfig_config_uniconfig_native_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:uniconfig-native-enabled'
    )
    uniconfig_config_install_uniconfig_node_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:install-uniconfig-node-enabled'
    )
    netconf_node_topology_schema_cache_directory: Optional[str] = Field(
        None, alias='netconf-node-topology:schema-cache-directory'
    )
    """
    The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount
    so that the loaded yang files are stored to a distinct directory to avoid potential conflict.
    """


class GnmiTopologySecurityChoiceModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_connection_type: Optional[topology_2.ConnectionTypeEnumeration] = (
        Field(None, alias='gnmi-topology:connection-type')
    )


class GnmiTopologyConnectionParameters(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gnmi_topology_host: Optional[str] = Field(None, alias='gnmi-topology:host')
    """
    IP address or hostname of the target
    """
    gnmi_topology_security_choice: Optional[
        Union[GnmiTopologySecurityChoiceModel, GnmiTopologySecurityChoice]
    ] = Field(None, alias='gnmi-topology:security-choice')
    gnmi_topology_device_type: Optional[str] = Field(
        None, alias='gnmi-topology:device-type'
    )
    """
    Specific type of gNMI device
    """
    gnmi_topology_port: Optional[int] = Field(
        None, alias='gnmi-topology:port', ge=0, le=65535
    )
    """
    The port number on which to contact the target
    """
    gnmi_topology_credentials: Optional[GnmiTopologyCredentials] = Field(
        None,
        alias='gnmi-topology:credentials',
        title='gnmi.topology.credentials.Credentials',
    )


class Gnmi(BaseModel):
    """
    gNMI node settings.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    uniconfig_config_confirmed_commit_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:confirmed-commit-enabled'
    )
    """
    Specifies whether to send confirmed commit RPC between validate RPC and confirming commit.
    """
    uniconfig_config_replace_paths: Optional[list[str]] = Field(
        None, alias='uniconfig-config:replace-paths'
    )
    """
    Replace paths that point to config that should be handled as a one replace request
    """
    gnmi_topology_flags: Optional[GnmiTopologyFlags] = Field(
        None, alias='gnmi-topology:flags', title='gnmi.topology.flagsgrouping.Flags'
    )
    gnmi_topology_all_type_paths: Optional[list[str]] = Field(
        None, alias='gnmi-topology:all-type-paths'
    )
    """
    Paths that should be read with the ALL data type
    """
    uniconfig_config_admin_state: Optional[config.AdminState] = Field(
        None, alias='uniconfig-config:admin-state'
    )
    gnmi_topology_other_parameters: Optional[GnmiTopologyOtherParameters] = Field(
        None,
        alias='gnmi-topology:other-parameters',
        title='gnmi.topology.otherparametersgrouping.OtherParameters',
    )
    gnmi_topology_update_paths: Optional[list[str]] = Field(
        None, alias='gnmi-topology:update-paths'
    )
    gnmi_topology_connection_parameters: Optional[GnmiTopologyConnectionParameters] = (
        Field(
            None,
            alias='gnmi-topology:connection-parameters',
            title='gnmi.topology.gnmiconnectionparameters.ConnectionParameters',
        )
    )
    gnmi_topology_dependency_paths: Optional[list[GnmiTopologyDependencyPath]] = Field(
        None, alias='gnmi-topology:dependency-paths'
    )
    uniconfig_config_store_without_mount: Optional[bool] = Field(
        None, alias='uniconfig-config:store-without-mount'
    )
    """
    In case we just want to store node metadata in the database without creating of mountpoint.
    """
    uniconfig_config_validation_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:validation-enabled'
    )
    """
    Specifies whether to send validate RPC before commit RPC.
    """
    gnmi_topology_session_timers: Optional[GnmiTopologySessionTimers] = Field(
        None,
        alias='gnmi-topology:session-timers',
        title='gnmi.topology.sessiontimersgrouping.SessionTimers',
    )
    gnmi_topology_node_state: Optional[dict[str, Any]] = Field(
        None,
        alias='gnmi-topology:node-state',
        title='gnmi.topology.gnminodestate.NodeState',
    )
    uniconfig_config_device_crypto: Optional[UniconfigConfigDeviceCrypto] = Field(
        None,
        alias='uniconfig-config:device-crypto',
        title='uniconfig.config.uniconfigconfignodefields.DeviceCrypto',
    )
    """
    Settings related to encryption of arbitrary leaves/leaf-list using public key that
    is read from device on specified path.
    """
    uniconfig_config_sequence_read_active: Optional[bool] = Field(
        None, alias='uniconfig-config:sequence-read-active'
    )
    """
    Forces reading of data sequentially when mounting device.
    """
    gnmi_topology_extensions_parameters: Optional[GnmiTopologyExtensionsParameters] = (
        Field(
            None,
            alias='gnmi-topology:extensions-parameters',
            title='gnmi.topology.gnmiconnectionparameters.ExtensionsParameters',
        )
    )
    """
    Defines a set of extensions parameters which can be optionally
    included with the request and response messages of gNMI RPCs.
    Allows registration of extensions defined outside of this package.
    """
    uniconfig_config_store_failed_installation: Optional[bool] = Field(
        None, alias='uniconfig-config:store-failed-installation'
    )
    """
    In case UniConfig fails to install the device, it will still populate the database.
    """
    gnmi_topology_schema_cache_directory: Optional[str] = Field(
        None, alias='gnmi-topology:schema-cache-directory'
    )
    """
    The destination schema repository for yang files relative to the cache directory.
    """
    subscriptions_stream: Optional[list[SubscriptionsStreamItem]] = Field(
        None, alias='subscriptions:stream'
    )
    """
    List of available streams to which subscription can be created.
    """
    uniconfig_config_nodes: Optional[
        Union[UniconfigConfigNodesModel3, UniconfigConfigNodesModel4]
    ] = Field(None, alias='uniconfig-config:nodes')
    gnmi_topology_remove_module_names_paths: Optional[list[str]] = Field(
        None, alias='gnmi-topology:remove-module-names-paths'
    )
    uniconfig_config_uniconfig_native_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:uniconfig-native-enabled'
    )
    uniconfig_config_install_uniconfig_node_enabled: Optional[bool] = Field(
        None, alias='uniconfig-config:install-uniconfig-node-enabled'
    )


class SnmpTopologyAuthNoPriv(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_security_name: Optional[str] = Field(
        None, alias='snmp-topology:security-name'
    )
    """
    The security name that is also specified on the device.
    """
    snmp_topology_authentication_password: Optional[str] = Field(
        None, alias='snmp-topology:authentication-password'
    )
    """
    Authentication password that is also specified on the device.
    """
    snmp_topology_authentication_protocol: Optional[
        topology_3.AuthenticationProtocolEnumeration
    ] = Field(None, alias='snmp-topology:authentication-protocol')


class SnmpTopologySecurityModelModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_auth_no_priv: Optional[SnmpTopologyAuthNoPriv] = Field(
        None,
        alias='snmp-topology:auth-no-priv',
        title='snmp.topology.security.securitymodel.authnoprivcase.AuthNoPriv',
    )


class SnmpTopologyAuthPriv(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_authentication_password: Optional[str] = Field(
        None, alias='snmp-topology:authentication-password'
    )
    """
    Authentication password that is also specified on the device.
    """
    snmp_topology_security_name: Optional[str] = Field(
        None, alias='snmp-topology:security-name'
    )
    """
    The security name that is also specified on the device.
    """
    snmp_topology_privacy_protocol: Optional[topology_3.PrivacyProtocolEnumeration] = (
        Field(None, alias='snmp-topology:privacy-protocol')
    )
    snmp_topology_privacy_password: Optional[str] = Field(
        None, alias='snmp-topology:privacy-password'
    )
    """
    Privacy password that is also specified on the device.
    """
    snmp_topology_authentication_protocol: Optional[
        topology_3.AuthenticationProtocolEnumeration
    ] = Field(None, alias='snmp-topology:authentication-protocol')


class SnmpTopologySecurityModelModel1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_auth_priv: Optional[SnmpTopologyAuthPriv] = Field(
        None,
        alias='snmp-topology:auth-priv',
        title='snmp.topology.security.securitymodel.authprivcase.AuthPriv',
    )


class Snmp(BaseModel):
    """
    snmp node settings.
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    snmp_topology_connection_retries: Optional[int] = Field(
        None, alias='snmp-topology:connection-retries', ge=0, le=65535
    )
    """
    The number of retries. Note: If the number of
    retries is set to 0, then the request will be sent
    out exactly once.
    """
    snmp_topology_port: Optional[int] = Field(
        None, alias='snmp-topology:port', ge=0, le=65535
    )
    """
    The host of the target.
    """
    snmp_topology_request_timeout: Optional[int] = Field(
        None, alias='snmp-topology:request-timeout', ge=0, le=4294967295
    )
    """
    Timeout in milliseconds before a confirmed request
    is resent or timed out.
    """
    snmp_topology_snmp_version: Optional[topology_3.SnmpVersionEnumeration] = Field(
        None, alias='snmp-topology:snmp-version'
    )
    snmp_topology_transport_type: Optional[topology_3.TransportTypeEnumeration] = Field(
        None, alias='snmp-topology:transport-type'
    )
    snmp_topology_host: Optional[str] = Field(None, alias='snmp-topology:host')
    """
    The port of the target.
    """
    snmp_topology_security_model: Optional[
        Union[
            SnmpTopologySecurityModelModel,
            SnmpTopologySecurityModelModel1,
            SnmpTopologySecurityModel,
        ]
    ] = Field(None, alias='snmp-topology:security-model')
    snmp_topology_mib_repository: Optional[str] = Field(
        None, alias='snmp-topology:mib-repository'
    )
    """
    The destination repository for mib files relative
    to the mibs directory.
    """


class Input(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node_id: str = Field(..., alias='node-id')
    """
    Node identifier of CLI/NETCONF/GNMI node.
    """
    cli: Optional[Cli] = Field(None, title='connection.manager.installnode.input.Cli')
    """
    CLI node settings.
    """
    netconf: Optional[Netconf] = Field(
        None, title='connection.manager.installnode.input.Netconf'
    )
    """
    NETCONF node settings.
    """
    gnmi: Optional[Gnmi] = Field(
        None, title='connection.manager.installnode.input.Gnmi'
    )
    """
    gNMI node settings.
    """
    snmp: Optional[Snmp] = Field(
        None, title='connection.manager.installnode.input.Snmp'
    )
    """
    snmp node settings.
    """
