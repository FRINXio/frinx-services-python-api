name: pr-create

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Docker image name, eg: frinx/schellar:3.0.0'
        required: true

jobs:
  generate-api-from-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse docker
        run: |
          echo "IMAGE_NAMESPACE=$(echo $IMAGE | cut -d '/' -f 1)" >> "$GITHUB_ENV"
          echo "IMAGE_REPO=$(echo $IMAGE | cut -d '/' -f 2 | cut -d ':' -f 1)" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=$(echo $IMAGE | cut -d ':' -f 2)" >> "$GITHUB_ENV"
        env:
          IMAGE: ${{ inputs.image }}

      - name: Validate input
        run: |
          echo ${IMAGE_NAMESPACE}
          if [[ "${IMAGE_NAMESPACE}" != "frinx" ]]; then
            echo "Only images from frinx namespace can be used!"
            exit 1
          fi
          
          # Semantic version regex pattern
          semantic_version_pattern='^[0-9]+\.[0-9]+\.[0-9]+$'
          
          if [[ "${IMAGE_TAG}" =~ $semantic_version_pattern ]]; then
            echo "Valid semantic version: ${IMAGE_TAG}"
          else
            echo "Invalid semantic version: ${IMAGE_TAG}"
            exit 1
          fi

      - name: Log into docker hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      - name: Start service
        run: |
          echo "${IMAGE_NAMESPACE} ${IMAGE_REPO} ${IMAGE_TAG}"
          pushd ${IMAGE_REPO}/python/ || exit 1
            docker compose -f docker-compose.yml up -d
          popd || exit 1

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.4.2"

      - name: Formatting and validating
        run: |
          pushd ${IMAGE_REPO}/python/ || exit 1
            poetry install
            poetry run ruff --fix . || true
            poetry run mypy . || true
            poetry run pyright . || true
          popd || exit 1

      - name: Check changed files
        uses: tj-actions/verify-changed-files@v17
        id: verify-changed-files

      - name: Update changelog
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          SCRIPT_PATH=".github/scripts"
          
          export $(${SCRIPT_PATH}/find-nearest-lower-version \
              --image-tag "${IMAGE_TAG}" \
              --path ${IMAGE_REPO}/python/RELEASE.md)
          
          echo $LAST_DOCKER_TAG $LAST_LIB_VERSION
          
          LIB_VERSION=$(${SCRIPT_PATH}/bump-version \
              --last-image ${LAST_DOCKER_TAG} \
              --new-image "${IMAGE_TAG}" \
              --last-lib ${LAST_LIB_VERSION})
          
          ${SCRIPT_PATH}/release-update \
              --image-tag "${IMAGE_TAG}" \
              --lib-version "${LIB_VERSION}" \
              --path ${IMAGE_REPO}/python/RELEASE.md
          
          sed -i "s/^version = \"[^\"]*\"/version = \"${LIB_VERSION}\"/g" ${IMAGE_REPO}/python/pyproject.toml

      - uses: tibdex/github-app-token@v1
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Create Pull Request
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          title: "[${{ env.IMAGE_REPO }}] Release package for ${{ inputs.image }}"
          commit-message: "[${{ env.IMAGE_REPO }}] Create and publish packages for ${{ env.IMAGE_TAG }}"
          branch-suffix: timestamp
          labels: automated-pr
          delete-branch: true
          reviewers: Jozefiel
          body: |
            Create and publish packages for ${{ env.IMAGE_REPO }}
          token: ${{ steps.generate-token.outputs.token }}

      - name: Collect logs to file
        if: ${{ always() }}
        run: |
          mkdir -p logs
          for container in $(docker ps --format '{{ .Names }}')
          do
            docker container logs $container &> logs/$container.log
            docker container inspect $container &> logs/${container}_inspect.json
          done

      - name: Upload pytest logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ github.workflow }}_logs.zip
          path: |
            ${{ github.workspace }}/logs/
          if-no-files-found: error
          retention-days: 1
