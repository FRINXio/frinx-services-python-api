#!/bin/env python3

"""
This script updates the release matrix table in a RELEASE.md file
by adding a new row with the specified Docker image tag and Python library version or
add a new Python library version to the existing row.

Usage:
    python release-update.py --image-tag 4.0.0 --lib-version 2.0.0 --path RELEASE.md

Example:
    python release-update.py --image-tag 4.0.0 --lib-version 2.0.0 --path RELEASE.md

Input:
    --image-tag: Docker image tag.
    --lib-version: Python library version.
    --path: Path to the RELEASE.md file.

Output:
    The specified RELEASE.md file will be updated with the new row in the release matrix table.
"""


import re
import argparse

PATTERN = re.compile(r"\|\s*([0-9.]+)\s*\|\s*([0-9., ]+)\s*\|")


def read_lines(path: str) -> list[str]:
    with open(path, 'r') as f:
        return f.readlines()


def write_lines(path: str, lines: list[str]) -> None:
    with open(path, 'w') as file:
        file.writelines(lines)


def find_docker_version_line(lines: list[str], image_tag: str, lib_version: str):
    match_line_number = None
    new_line = f"\n| {image_tag} | {lib_version} |"
    for line_num, line in enumerate(lines, start=1):
        match = PATTERN.match(line)
        if match and image_tag == match.group(1):
            match_line_number = line_num - 1
            new_line = f"| {match.group(1)} | {match.group(2).strip()}, {lib_version} |"
    return match_line_number, new_line


def update_release_matrix(release_file: str, image_tag: str, lib_version: str) -> None:
    lines = read_lines(release_file)
    line_num, new_line = find_docker_version_line(lines, image_tag, lib_version)

    if line_num:
        lines[line_num] = PATTERN.sub(new_line, lines[line_num])
    else:
        lines.append(new_line)

    write_lines(release_file, lines)


def main():
    parser = argparse.ArgumentParser(description="Update release table with new package")
    parser.add_argument("--image-tag", type=str, required=True,  help="Docker tag")
    parser.add_argument("--lib-version", type=str, required=True, help="Python library version")
    parser.add_argument("--path", type=str, required=True, help="RELEASE.md path")

    args = parser.parse_args()
    update_release_matrix(release_file=args.path, image_tag=args.image_tag, lib_version=args.lib_version)


if __name__ == "__main__":
    main()
