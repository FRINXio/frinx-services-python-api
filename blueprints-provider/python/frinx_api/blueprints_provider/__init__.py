# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-12-02T12:20:12+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, TypeAlias, Union

from pydantic import BaseModel, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


DateTime: TypeAlias = str
"""
A type representing a formatted java.time.LocalDateTime (UTC).
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


JSON: TypeAlias = str
"""
A type representing a JSON type (JSON).
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class BlueprintType(Enum):
    """
    Specifies the type of blueprint.
    """

    install = 'INSTALL'
    performance = 'PERFORMANCE'
    stream = 'STREAM'
    topology_lldp = 'TOPOLOGY_LLDP'
    topology_mpls = 'TOPOLOGY_MPLS'
    topology_ptp = 'TOPOLOGY_PTP'
    topology_synce = 'TOPOLOGY_SYNCE'


class ConnectionType(Enum):
    """
    Management protocol used for creation of connection to the device.
    """

    cli = 'CLI'
    gnmi = 'GNMI'
    netconf = 'NETCONF'
    snmp = 'SNMP'


class Connection(BaseModel):
    """
    Represents a connection in a graph.
    """

    edges: List[Edge] = Field(
        ..., description='List of edges within the blueprint connection.'
    )
    page_info: PageInfo = Field(
        ...,
        alias='pageInfo',
        description='Pagination information for the blueprint connection.',
    )
    typename__: Optional[Literal['Connection']] = Field(
        'Connection', alias='__typename'
    )


class Edge(BaseModel):
    """
    Represents an edge in the graph.
    """

    cursor: Optional[String] = Field(None, description='Cursor for pagination.')
    node: Node = Field(..., description='Node associated with the edge.')
    typename__: Optional[Literal['Edge']] = Field('Edge', alias='__typename')


class BlueprintConnection(Connection):
    """
    Represents a connection in the blueprint graph.
    """

    edges: List[BlueprintEdge] = Field(
        ..., description='List of edges within the blueprint connection.'
    )
    page_info: PageInfo = Field(
        ...,
        alias='pageInfo',
        description='Pagination information for the blueprint connection.',
    )
    typename__: Optional[Literal['BlueprintConnection']] = Field(
        'BlueprintConnection', alias='__typename'
    )


class BlueprintEdge(Edge):
    """
    Represents an edge in the blueprint graph.
    """

    cursor: Optional[String] = Field(None, description='Cursor for pagination.')
    node: BlueprintNode = Field(
        ..., description='Node associated with the blueprint edge.'
    )
    typename__: Optional[Literal['BlueprintEdge']] = Field(
        'BlueprintEdge', alias='__typename'
    )


class BlueprintMetadata(BaseModel):
    """
    Metadata associated with a blueprint.
    """

    created_at: DateTime = Field(
        ..., alias='createdAt', description='Timestamp of the blueprint creation (UTC).'
    )
    updated_at: DateTime = Field(
        ...,
        alias='updatedAt',
        description='Timestamp of the last blueprint update (UTC).\nIf the blueprint was not updated, the value is equal to the creation timestamp.\nRemoving the blueprint is considered as an update.',
    )
    typename__: Optional[Literal['BlueprintMetadata']] = Field(
        'BlueprintMetadata', alias='__typename'
    )


class BlueprintNode(BaseModel):
    """
    Information about the blueprint - identifier, patterns used for matching the device, and the template content.
    """

    blueprint_type: BlueprintType = Field(
        ..., alias='blueprintType', description='Specifies the type of blueprint.'
    )
    connection_type: ConnectionType = Field(
        ...,
        alias='connectionType',
        description='Management protocol used for creation of connection to the device.',
    )
    model_pattern: Optional[String] = Field(
        None,
        alias='modelPattern',
        description="Regular expression pattern for matching the model of the device (for example, 'vsr .+'",
    )
    name: String = Field(
        ..., description='Unique human-readable name of the blueprint.'
    )
    template: String = Field(
        ...,
        description='Settings associated with the blueprint in JSON format (e.g. installation parameters or stream parameters).',
    )
    vendor_pattern: Optional[String] = Field(
        None,
        alias='vendorPattern',
        description="Regular expression pattern for matching the vendor of the device (for example, '.*wrt').",
    )
    version_pattern: Optional[String] = Field(
        None,
        alias='versionPattern',
        description="Regular expression pattern for matching the version of the device (for example, 'v[0-9]+').",
    )
    typename__: Optional[Literal['BlueprintNode']] = Field(
        'BlueprintNode', alias='__typename'
    )


class BlueprintOutput(BaseModel):
    """
    Information about the persisted blueprint - generated identifier, blueprint content, and metadata.
    """

    id: ID = Field(
        ...,
        description="Unique identifier of the blueprint in the format 'blueprint/[id]', where [id] is represented by automatically generated database identifier.",
    )
    metadata: BlueprintMetadata = Field(
        ...,
        description='Metadata associated with the blueprint - creation and update timestamps.',
    )
    node: BlueprintNode = Field(
        ...,
        description='Blueprint content - name, connection type, template, and patterns.',
    )
    typename__: Optional[Literal['BlueprintOutput']] = Field(
        'BlueprintOutput', alias='__typename'
    )


class PageInfo(BaseModel):
    """
    Contains pagination information for a connection. Indicates if there are more pages and the position of the last fetched item.
    """

    end_cursor: Optional[String] = Field(
        None,
        alias='endCursor',
        description='The cursor for the last item in the current page of results. Use this cursor to fetch the next set of items.',
    )
    has_next_page: Boolean = Field(
        ...,
        alias='hasNextPage',
        description='Indicates whether there is a next page of items available after the current one.',
    )
    typename__: Optional[Literal['PageInfo']] = Field('PageInfo', alias='__typename')


class BlueprintNodeInput(BaseModel):
    """
    Information about the blueprint - identifier, patterns used for matching the device, and the template content.
    """

    blueprint_type: BlueprintType = Field(
        ..., alias='blueprintType', description='Specifies the type of blueprint.'
    )
    connection_type: ConnectionType = Field(
        ...,
        alias='connectionType',
        description='Management protocol used for creation of connection to the device.',
    )
    model_pattern: Optional[String] = Field(
        None,
        alias='modelPattern',
        description="Regular expression pattern for matching the model of the device (for example, 'vsr .+'",
    )
    name: String = Field(
        ..., description='Unique human-readable name of the blueprint.'
    )
    template: String = Field(
        ...,
        description='Settings associated with the blueprint in JSON format (e.g. installation parameters or stream parameters).',
    )
    vendor_pattern: Optional[String] = Field(
        None,
        alias='vendorPattern',
        description="Regular expression pattern for matching the vendor of the device (for example, '.*wrt').",
    )
    version_pattern: Optional[String] = Field(
        None,
        alias='versionPattern',
        description="Regular expression pattern for matching the version of the device (for example, 'v[0-9]+').",
    )
    typename__: Optional[Literal['BlueprintNodeInput']] = Field(
        'BlueprintNodeInput', alias='__typename'
    )


# Represents a node in a graph.
Node: TypeAlias = BlueprintNode
